package service;

import dataaccess.AuthTokenDAO;
import dataaccess.DataAccessException;
import dataaccess.GameDAO;
import dataaccess.GameDataAccess;
import model.AuthData;
import model.GameData;

import java.util.List;

public class GameService {
    private final GameDataAccess gameDAO;
    private final AuthTokenDAO authTokenDAO;

    public GameService() {
        this.gameDAO = new GameDAO();
        this.authTokenDAO = AuthTokenDAO.getInstance();
    }

    public GameService(GameDataAccess gameDAO, AuthTokenDAO authTokenDAO) {
        this.gameDAO = gameDAO;
        this.authTokenDAO = authTokenDAO;
    }

    public List<GameData> listGames(String authToken) throws DataAccessException {
        // Validate the auth token
        AuthData authData = authTokenDAO.getAuth(authToken);
        if (authData == null) {
            throw new DataAccessException("Error: unauthorized");
        }

        // Retrieve the list of games
        return gameDAO.getAllGames();
    }

    public int createGame(String authToken, String gameName) throws DataAccessException {
        // Validate the auth token
        if (authTokenDAO.getAuth(authToken) == null) {
            throw new DataAccessException("Error: unauthorized");
        }

        // Validate the game name
        if (gameName == null || gameName.isEmpty()) {
            throw new DataAccessException("Error: bad request");
        }

        // Create a new game with a unique game ID
        GameData newGame = new GameData(0, null, null, gameName); // Game ID will be generated by GameDAO
        return gameDAO.insertGame(newGame);
    }

    public void joinGame(String authToken, int gameId, String playerColor) throws DataAccessException {
        // Validate the auth token
        AuthData authData = authTokenDAO.getAuth(authToken);
        if (authData == null) {
            throw new DataAccessException("Error: unauthorized");
        }

        // Retrieve the game by its ID
        GameData game = gameDAO.getGameById(gameId);
        if (game == null) {
            throw new DataAccessException("Error: bad request");
        }

        // Check if the requested color is available
        if ("WHITE".equalsIgnoreCase(playerColor)) {
            if (game.whiteUsername() != null) {
                throw new DataAccessException("Error: already taken");
            }
            // Update the game with the new player
            GameData updatedGame = new GameData(game.gameID(), authData.username(), game.blackUsername(), game.gameName());
            gameDAO.updateGame(updatedGame);
        } else if ("BLACK".equalsIgnoreCase(playerColor)) {
            if (game.blackUsername() != null) {
                throw new DataAccessException("Error: already taken");
            }
            // Update the game with the new player
            GameData updatedGame = new GameData(game.gameID(), game.whiteUsername(), authData.username(), game.gameName());
            gameDAO.updateGame(updatedGame);
        } else {
            throw new DataAccessException("Error: bad request");
        }
    }
}